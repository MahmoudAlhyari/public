print('Building form...', end='\r')

#display(pivot_ui(df)) #Function Call
import IPython
from IPython.core.display import display, HTML
import ipywidgets as widgets
from jupyter_audit_query_tools.operations_query_web_service import OperationsQueryWebService as _queryWs
from jupyter_audit_query_tools.operations_query_web_service import OperationsQueryWebService as queryWs
import json
import re
import pandas as pd
import time
import os
import datetime
import pytz

### Addin a RunMe file ###
if not os.path.isfile('RunMe.ipynb'):
    with open('RunMe.ipynb', 'w+') as file:
        file.writelines("""
    {
        "cells": [{"cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [], "source": ["%run Query.ipynb"]}],
        "metadata": {
            "kernelspec": {"display_name": "Python 3", "language": "python", "name": "python3"},
            "language_info": {
                "codemirror_mode": {"name": "ipython", "version": 3},
                "file_extension": ".py",
                "mimetype": "text/x-python",
                "name": "python",
                "nbconvert_exporter": "python",
                "pygments_lexer": "ipython3",
                "version": "3.7.3"}}, 
        "nbformat": 4,
        "nbformat_minor": 4}
    """)

### IMPORTS ###
try: from pivottablejs import pivot_ui
except:
    temp_output = widgets.Output()
    with temp_output:
        !pip install pivottablejs
        print('ksjgdfklasjdfh'*100)
    temp_output.clear_output()
    from pivottablejs import pivot_ui

### Fucntions ###
def getAllTables(tbl_contains = ''):
    tbls = []
    for db in queryWs.ws_get_databases('hive-mdl'):
        for schema in queryWs.ws_get_database_schemas('hive-mdl', db):
            for table in queryWs.ws_get_database_tables('hive-mdl', db, schema):
                if tbl_contains in f"{db}.{table}" or tbl_contains=='': tbls.append(f"{db}.{table}")
    return tbls

def getQuery(tbl, getSample):
    display(f'Building Query for {tbl}')
    try:
        desc = _queryWs.ws_run_query(data_source = 'hive-mdl', limit=999999, query=f"DESCRIBE {tbl}")
    except:
        rr = '--Error Describing Table'

    try:    
        if getSample:
            smplQ = _queryWs.ws_run_query(data_source = 'hive-mdl', limit=5, query=f"SELECT * FROM {tbl}")
            smpl = pd.DataFrame({col: ', '.join(smplQ[col].astype(str).tolist()) for col in list(smplQ.columns)}, index=[0]).T.reset_index()
            smpl.columns = ['Column','Sample']
            desc = desc.merge(smpl, on='Column', how='left')
        else: desc['Sample'] = 'NotRequested'
    except Exception as e:
        desc['Sample'] = str(e)#'*QueryErr'

    try:
        prtCols = list(set(desc.loc[desc['Extra'] == 'partition key']['Column'].tolist()))
        prtStr = _queryWs.ws_run_query(data_source = 'hive-mdl', limit=2000000, query=f"EXPLAIN (TYPE IO, FORMAT JSON) SELECT {', '.join(prtCols)} FROM {tbl}")
        prtValDict = {item['columnName']: item['domain']['ranges'] for item in json.loads(prtStr.iloc[0][0])['inputTableColumnInfos'][0]['columnConstraints']}


        for prtCol in prtCols:
            desc['Sample'][desc['Column']==prtCol] = ', '.join([rng['low']['value'] if rng['low']['value'] == rng['high']['value'] else f"{rng['low']['value']} to {rng['high']['value']}" for rng in prtValDict[prtCol]])
    except Exception as e:
        where = '-- there was error fitch partition columns'
    cols = []
    wheres = []
    for index, row in desc.iterrows():
        cols.append("\t"+row['Column']+("" if index+1==len(desc) else ",")+" -- "+row['Type']+" | "+row['Sample'])
        if row['Extra'] == 'partition key': wheres.append(f"{row['Column']} in ('') --"+row['Type']+" | "+row['Sample'])

    where = '' if len(wheres)==0 else "WHERE\n\t"+'\n\tAND '.join(wheres)
    return "SELECT\n"+'\n'.join(cols)+"\nFROM\n\t"+tbl+"\n"+where+'\nlimit 10'

saveQFileName = 'Query_Config.JSON'
if not os.path.isfile(saveQFileName):
    with open(saveQFileName, 'wt') as json_file: 
        json.dump({'Tables': {}, 'Saved_Queries': {}}, json_file)
with open(saveQFileName) as json_file:
    savedQs = json.load(json_file)

### Building the form ###
headHTML = """<h1 style="text-align: center;"><strong><u>Query Tool</u></strong></h1><p>This tool assists you in finding the right table by providing a list of all available tables to your account, once a table is selected, a query will be built with all columns in that table, each column will have the column type and a sample of the sample checkbox is selected. It will also add all partition column in the where section with all available values.</p>"""

tbl_field = widgets.Combobox(
    placeholder='Fetching tables' if savedQs['Tables'] == {} else 'Select a table',
    options=['Please wait...'] if savedQs['Tables'] == {} else list(savedQs['Tables'].keys()),
    description='Table:',
    ensure_option=False,
    disabled=False,
    layout=widgets.Layout(min_width='75%')
)

sample_checkbox = widgets.Checkbox(
    value=False,
    description='Sample',
    disabled=False,
    indent=False
)

button_refTbls = widgets.Button( description = 'Ref. Tables' )

cons_hbox = widgets.HBox([tbl_field, sample_checkbox, button_refTbls])

savedQ_field = widgets.Combobox(
    placeholder= 'No saved queries yet' if len(list(savedQs['Saved_Queries'].keys()))==0 else 'Retrieve a saved query',
    options = list(savedQs['Saved_Queries'].keys()),
    description='Saved Query:',
    ensure_option=False,
    disabled=False,
    layout=widgets.Layout(min_width='75%')
)

button_saveQ = widgets.Button( description = 'Save Query' )
button_delQ = widgets.Button( description = 'Delete Query' )

autosave_checkbox = widgets.Checkbox(
    value=True,
    description='Autosave on Run',
    disabled=False,
    indent=False
)

savedQ_hbox = widgets.HBox([savedQ_field, button_saveQ, button_delQ,autosave_checkbox])

query_area = widgets.Textarea(
    value='',
    placeholder='Type something',
    description='Query:',
    disabled=False,
    layout={'height': '500px', 'min_height': '500px', 'min_width': '100%', 'overflow_y': 'auto'}
)

output = widgets.Output()#layout={'height': '50px', 'overflow_y': 'auto'})

button_runq = widgets.Button( description = 'Run Query' )
button_clear = widgets.Button( description = 'Clear')
button_save = widgets.Button( description = 'Save CSV' )

buttons = widgets.HBox([button_runq, button_clear])

print('                 ', end='\r')
display(HTML(headHTML), cons_hbox, savedQ_hbox, query_area, buttons, output)

if savedQs['Tables'] == {}: 
    savedQs['Tables'] = {tbl : '' for tbl in sorted(getAllTables())}
    with open(saveQFileName, 'wt') as json_file: json.dump(savedQs, json_file)
    tbl_field.options = list(savedQs['Tables'].keys())
    tbl_field.placeholder='Select a table'

pivot_checkbox = widgets.Checkbox(
    value=False,
    description='Pivot',
    disabled=False,
    indent=False
)

def run_query(q):
    with output:

        global df, query
        output.clear_output()
        display('Running Query...')

        try:
            q = query_area.value
            lmt = int(re.search('limit\s*([0-9]*)\s*$', q).group(1) if re.search('limit\s*([0-9]*)\s*$', q) else 2000000)
            qr = re.search('([\S\s.]*)limit\s*[0-9]*\s*$', q).group(1) if re.search('([\S\s.]*)limit\s*[0-9]*\s*$', q) else q
            df = _queryWs.ws_run_query(data_source = 'hive-mdl', limit=lmt, query = qr)
            output.clear_output()
            display(f'Query Completed, {len(df)} rows returned')
        except Exception as e:
            output.clear_output()
            display(widgets.HTML(f"""<p><span style="color: rgb(226, 80, 65);"><em>Error: {str(e)}</em></span></p>"""))
            return ""            
        
        now = datetime.datetime.now(pytz.timezone('Australia/Sydney')).strftime('%y%m%d%H%M')
        rgx = 'from\s*([^\s]*)|join\s*([^\s]*)'
        tblsQueried = ', '.join([''.join(match)[''.join(match).find('.')+1:] for match in re.findall(rgx, q.lower())])
        cols = ', '.join(list(df.columns))
        queryName = f"{now}|{len(q.splitlines())}|{len(df)}|{tblsQueried}|{cols}"
        savedQs['Saved_Queries'][queryName] = q
        with open(saveQFileName, 'wt') as json_file: json.dump(savedQs, json_file)
        savedQ_field.placeholder= 'Retrieve a saved query'
        savedQ_field.options = list(savedQs['Saved_Queries'].keys())
            
        if len(df)>0:

            output.clear_output()
            if pivot_checkbox.value:
                display(widgets.HBox([widgets.Label(f'Query Completed, {len(df)} rows returned.\nPreparing Pivot.'), button_save]))
                display(pivot_checkbox)
                display(pivot_ui(df))
            else:
                display(widgets.HBox([widgets.Label(f'Query Completed, {len(df)} rows returned.\nScroll to the right for a better view if needed.'), button_save]))
                display(pivot_checkbox)
                display(widgets.HBox([widgets.HTML(value = df.to_html(index=False), 
                                                   placeholder = '',
                                                   description = '')
                      ],
                      layout=widgets.Layout(flex='0 1 auto', 
                                            min_height='40px',
                                            min_width='95%',
                                            max_width='600px', 
                                            overflow_x='auto', 
                                            visibility='visible')
                     )
               )
button_runq.on_click(run_query)

def saveFile(q):
    try:
        num = [int(re.search('^MDL2_Query_([0-9]*).csv$', fileName).group(1) if re.search('^MDL2_Query_([0-9]*).csv$', fileName) else 0) for fileName in os.listdir()]
        df.to_csv(f'MDL2_Query_{max(num)+1}.csv')
    except Exception as e:
        with output: display(str(e))

button_save.on_click(saveFile)

def clear(q):
    tbl_field.value=""
    query_area.value=""
    output.clear_output()
button_clear.on_click(clear)

def on_tbl_change(value):
    global tbl_field, sample_checkbox
    if tbl_field.value in list(savedQs['Tables'].keys()):
        query_area.value=f'Building a query for {tbl_field.value}...'
        query_area.value=getQuery(tbl_field.value, sample_checkbox.value)
tbl_field.observe(on_tbl_change, 'value')
sample_checkbox.observe(on_tbl_change, 'value')

def on_piv_change(value):
    with output:
        if len(df)>0:

            output.clear_output()
            display(pivot_checkbox)

            if pivot_checkbox.value:
                display(widgets.HBox([widgets.Label(f'Query Completed, {len(df)} rows returned.\nPreparing Pivot.'), button_save]))
                display(pivot_ui(df))
            else:
                display(widgets.HBox([widgets.Label(f'Query Completed, {len(df)} rows returned.\nScroll to the right for a better view if needed.'), button_save]))
                display(widgets.HBox([widgets.HTML(value = df.to_html(index=False), 
                                                   placeholder = '',
                                                   description = '')
                      ],
                      layout=widgets.Layout(flex='0 1 auto', 
                                            min_height='40px',
                                            min_width='95%',
                                            max_width='600px', 
                                            overflow_x='auto', 
                                            visibility='visible')
                     )
               )
pivot_checkbox.observe(on_piv_change, 'value')

def on_savedQ_change(value):
    if savedQ_field.value in savedQs['Saved_Queries']: query_area.value = savedQs['Saved_Queries'][savedQ_field.value]
savedQ_field.observe(on_savedQ_change, 'value')

def saveQ(q):
    savedQs['Saved_Queries'][savedQ_field.value] = query_area.value
    with open(saveQFileName, 'wt') as json_file: json.dump(savedQs, json_file)
    savedQ_field
    savedQ_field.placeholder= 'Retrieve a saved query'
    savedQ_field.options = list(savedQs['Saved_Queries'].keys())
    tbl_field.value = ''
button_saveQ.on_click(saveQ)

def delQ(q):
    if savedQ_field.value in savedQs['Saved_Queries']: del savedQs['Saved_Queries'][savedQ_field.value]
    with open(saveQFileName, 'wt') as json_file: json.dump(savedQs, json_file)
    savedQ_field.placeholder= 'No saved queries yet' if len(list(savedQs['Saved_Queries'].keys()))==0 else 'Retrieve a saved query'
    savedQ_field.options = list(savedQs['Saved_Queries'].keys())
    savedQ_field.value = ''
    query_area.value = ''
    tbl_field.value = ''
button_delQ.on_click(delQ)

def refTbls(q):
    tbl_field.placeholder='Fetching tables...'
    savedQs['Tables'] = {tbl : '' for tbl in sorted(getAllTables())}
    with open(saveQFileName, 'wt') as json_file: json.dump(savedQs, json_file)
    tbl_field.options = list(savedQs['Tables'].keys())
    tbl_field.placeholder='Select a table'
button_refTbls.on_click(refTbls)
